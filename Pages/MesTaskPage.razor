@page "/"
@page "/MesTask"
@inject DataBufferService dataBufferService
@inject UIService uiService

<style>
	.Queueing > td {
		background-color: rgb(217, 217, 217);
	}

	.Running > td {
		background-color: rgb(153, 255, 243);
	}

	.Finished > td {
		background-color: rgb(153, 255, 165);
	}

	.Error > td {
		background-color: rgb(255, 51, 51);
	}

	.Pause > td {
		background-color: rgb(255, 238, 153);
	}

	.Cancel > td {
		background-color: rgb(255, 51, 51);
	}
</style>

<DxGridLayout>
	<Rows>
		<DxGridLayoutRow Height="10%" />
		<DxGridLayoutRow Height="90%" />
	</Rows>
	<Columns>
		<DxGridLayoutColumn Width="30%" />
		<DxGridLayoutColumn Width="70%" />
	</Columns>
	<Items>
		<DxGridLayoutItem Row="0" Column="0" ColumnSpan="2">
			<Template>
				<div class="rounded-pill" style="background-color:@titleBackground">
					<DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain" Title="WIP">
						<Items>
							<DxToolbarItem Text="Queue" RenderStyle="ButtonRenderStyle.Secondary" BeginGroup="true" Enabled="false">
								@context.Text
								<span class="rounded" style="margin-left:10px; vertical-align:central">@queueCount</span>
							</DxToolbarItem>
							<DxToolbarItem Text="Running" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" Enabled="false">
								@context.Text
								<span class="rounded" style="margin-left:10px; vertical-align:central">@runningCount</span>
							</DxToolbarItem>
							<DxToolbarItem Text="Fail" RenderStyle="ButtonRenderStyle.Danger" BeginGroup=" true" Enabled="false">
								@context.Text
								<span class="rounded" style="margin-left:10px; vertical-align:central">@failCount</span>
							</DxToolbarItem>
							@*<DxToolbarItem Text="Pause" RenderStyle="ButtonRenderStyle.Warning" BeginGroup="true" Enabled="false">
							@context.Text
							<span class="rounded" style="margin-left:10px; vertical-align:central">@pauseCount</span>
							</DxToolbarItem>*@
						</Items>
					</DxToolbar>
				</div>
			</Template>
		</DxGridLayoutItem>
		<DxGridLayoutItem Row="1" Column="0">
			<Template>
				<div>
					<DxGrid Data="@mesTasks" PageSize="10" AllowSort="false" FocusedRowEnabled="true" FocusedRowChanged="OnSelectTaskChanged" CustomizeCellDisplayText="@SetUnboundColumn" CustomizeElement="GetTaskStatusCss">
						<Columns>
							<DxGridDataColumn Caption="Mes no." FieldName="TaskNoFromMes" />
							<DxGridDataColumn Caption="Status" FieldName="Status" />
						</Columns>
					</DxGrid>
				</div>
			</Template>
		</DxGridLayoutItem>
		<DxGridLayoutItem Row="1" Column="1">
			<Template>
				<div>
					<DxFormLayout>
						@if (selectedTask != null)
						{
							<DxFormLayoutGroup Caption="@selectedTask.TaskNoFromMes">
								<DxFormLayoutItem Caption="Task Type:">
									<DxSpinEdit Value="@selectedTask.TaskType" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="From:">
									<DxTextBox Text="@selectedTask.FromStation" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="To:">
									<DxTextBox Text="@selectedTask.ToStation" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="Barcode:">
									<DxTextBox Text="@selectedTask.Barcode" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="Loader to AMR high port:">
									<DxCheckBox Checked="@selectedTask.LoaderToAmrhighOrLow" Enabled="false"></DxCheckBox>
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="AMR to Loader high port:">
									<DxCheckBox Checked="@selectedTask.AmrtoLoaderHighOrLow" Enabled="false"></DxCheckBox>
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="Status:">
									<DxSpinEdit Value="@selectedTask.Status" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="Get From Mes:">
									<DxTextBox Text="@selectedTask.GetFromMesTime" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="Assign To SwarmCore:">
									<DxTextBox Text="@selectedTask.AssignToSwarmCoreTime" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="SwarmCore Start Task:">
									<DxTextBox Text="@selectedTask.SwarmCoreActualStratTime" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="SwarmCore Task no:">
									<DxTextBox Text="@selectedTask.TaskNoFromSwarmCore" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="AMR ID:">
									<DxTextBox Text="@selectedTask.Amrid" Enabled="false" />
								</DxFormLayoutItem>
								<DxFormLayoutItem Caption="Interrupt Time(Fail or Pause):">
									<DxTextBox Text="@selectedTask.FailTime" Enabled="false" />
								</DxFormLayoutItem>
							</DxFormLayoutGroup>
							<DxFormLayoutGroup Caption="Operations">
								@switch (selectedTask.Status)
								{
									case 0://queue
										@*if (selectedTask.TaskNoFromMes.Trim().Contains("test"))
										{
											<DxFormLayoutItem ColSpanMd="4" Context="fl_context">
												<DxButton Text="Active" RenderStyle="ButtonRenderStyle.Info"
														  Click="(async()=>{await ManuallyStartProcess(selectedTask);})">
												</DxButton>
											</DxFormLayoutItem>
										}*@
										break;
									case 1://active
										@*if (selectedTask.TaskNoFromMes.Trim().Contains("test"))
										{
											<DxFormLayoutItem ColSpanMd="4" Context="fl_context">
												<DxButton Text="Fail" RenderStyle="ButtonRenderStyle.Danger" Click="(async()=>{await ManuallySetFail(selectedTask);})" />
											</DxFormLayoutItem>
											<DxFormLayoutItem ColSpanMd="4" Context="fl_context">
												<DxButton Text="Finish" RenderStyle="ButtonRenderStyle.Success" Click="(()=>{deleteDialogueShow = true;})" />
											</DxFormLayoutItem>
										}*@
										break;
									case 2://complete
										break;
									case 3://fail
										<DxFormLayoutItem ColSpanMd="4" Context="fl_context">
											<DxButton Text="Finish" RenderStyle="ButtonRenderStyle.Danger" Click="(()=>{deleteDialogueShow = true;})" />
										</DxFormLayoutItem>
										break;
									case 4://pause
										break;
									case 5://Cancel
										break;
									default:
										break;

								}
							</DxFormLayoutGroup>
						}
					</DxFormLayout>
				</div>
			</Template>
		</DxGridLayoutItem>
	</Items>
</DxGridLayout>
@if (selectedTask != null)
{
	<DxPopup @bind-Visible="@deleteDialogueShow" HeaderText="Remove WIP" ShowFooter="true">
		<BodyContentTemplate>
			<DeleteWIPDialogue mesTask="@selectedTask"></DeleteWIPDialogue>
		</BodyContentTemplate>
		<FooterContentTemplate>
			<DxButton Enabled="@(!sending)" RenderStyle="ButtonRenderStyle.Danger" Click="(async ()=> {await ManuallyFinish(selectedTask);sending = false;deleteDialogueShow = false;})" Context="btn_context">
				<div>
					<DxWaitIndicator Visible="@sending" />
					<span>@btnText</span>
				</div>
			</DxButton>
		</FooterContentTemplate>
	</DxPopup>
}

@code {
	private List<MesTaskDetail> mesTasks;
	private MesTaskDetail selectedTask;

	private int total = 0;
	private int queueCount = 0;
	private int runningCount = 0;
	private int failCount = 0;
	private int pauseCount = 0;

	private bool deleteDialogueShow = false;


	private bool sending = false;
	private string btnText => sending ? "" : "send";

	private string testTaskid = "test_task_id";
	private string testTaskAmrid = "test_amr_id";

	private string titleBackground = "rgb(255,255,255)";

	protected override Task OnInitializedAsync()
	{
		uiService.ShowPanel("Loading...");
		mesTasks = dataBufferService.GetWIPTasks().ToList();
		RedirectSelectTask();
		dataBufferService.SingleMesTaskChangeAct += UpdateMesTaskStatus;

		return base.OnInitializedAsync();
	}

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			uiService.ClosePanel();
		}
		return base.OnAfterRenderAsync(firstRender);
	}

	private void RedirectSelectTask()
	{
		if (mesTasks != null || mesTasks.Count > 0)
		{
			selectedTask = mesTasks.FirstOrDefault();
		}
		GetStastic();
	}

	private void OnSelectTaskChanged(GridFocusedRowChangedEventArgs e)
	{
		InvokeAsync(() =>
		{
			selectedTask = e.DataItem == null ? null : e.DataItem as MesTaskDetail;
			StateHasChanged();
		});
	}

	private void UpdateMesTaskStatus(MesTaskDetail task)
	{
		//test task
		//if (task.TaskNoFromMes.Trim().Contains("test"))
		//{
		//	//add new test task
		//	if (!mesTasks.Exists(x => x.TaskNoFromMes == task.TaskNoFromMes) && task.Status == 0)
		//	{
		//		InvokeAsync(() =>
		//		{
		//			mesTasks.Add(new MesTaskDetail
		//				{
		//					TaskNoFromMes = task.TaskNoFromMes,
		//					Amrid = task.Amrid,
		//					TaskNoFromSwarmCore = task.TaskNoFromSwarmCore,
		//					FromStation = task.FromStation,
		//					ToStation = task.ToStation,
		//					Barcode = task.Barcode,
		//					LoaderToAmrhighOrLow = task.LoaderToAmrhighOrLow,
		//					AmrtoLoaderHighOrLow = task.AmrtoLoaderHighOrLow,
		//					Priority = task.Priority,
		//					Status = task.Status,
		//					GetFromMesTime = task.GetFromMesTime,
		//					AssignToSwarmCoreTime = task.AssignToSwarmCoreTime,
		//					SwarmCoreActualStratTime = task.SwarmCoreActualStratTime,
		//					FailTime = task.FailTime,
		//					FinishOrTimeoutTime = task.FinishOrTimeoutTime,
		//					FinishReason = task.FinishReason,
		//				});
		//		});
		//	}
		//}
		//else
		//{
			//new mes task not assign to swarm core
			if (task.Status == 0)
			{
				if (!mesTasks.Exists(x => x.TaskNoFromMes == task.TaskNoFromMes))
				{
					InvokeAsync(() =>
					{
						mesTasks.Add(new MesTaskDetail
							{
								TaskNoFromMes = task.TaskNoFromMes,
								Amrid = task.Amrid,
								FromStation = task.FromStation,
								ToStation = task.ToStation,
								Barcode = task.Barcode,
								LoaderToAmrhighOrLow = task.LoaderToAmrhighOrLow,
								AmrtoLoaderHighOrLow = task.AmrtoLoaderHighOrLow,
								Priority = task.Priority,
								Status = task.Status,
								GetFromMesTime = task.GetFromMesTime,
								AssignToSwarmCoreTime = task.AssignToSwarmCoreTime,
								FailTime = task.FailTime,
								FinishOrTimeoutTime = task.FinishOrTimeoutTime,
								FinishReason = task.FinishReason,
							});
						//StateHasChanged();
					});

				}
			}
			//complete & cancel
			else if (task.Status == 2 || task.Status == 5)
			{
				if (mesTasks.Exists(x => x.TaskNoFromMes == task.TaskNoFromMes))
				{
					InvokeAsync(() =>
					{
						MesTaskDetail targetTask = mesTasks.FirstOrDefault(x => x.TaskNoFromMes == task.TaskNoFromMes);
						mesTasks.Remove(targetTask);
						selectedTask = null;
						//StateHasChanged();
					});
				}
			}
			//update mes task  status (active & pause & fail) assigned to swarm core
			else
			{
				if (mesTasks.Exists(x => x.TaskNoFromMes == task.TaskNoFromMes))
				{
					InvokeAsync(() =>
					{
						MesTaskDetail targetTask = mesTasks.FirstOrDefault(x => x.TaskNoFromMes == task.TaskNoFromMes);
						targetTask.Status = task.Status;
						targetTask.Amrid = task.Amrid;
						targetTask.TaskNoFromSwarmCore = task.TaskNoFromSwarmCore;
						targetTask.AssignToSwarmCoreTime = task.AssignToSwarmCoreTime;
						targetTask.SwarmCoreActualStratTime = task.SwarmCoreActualStratTime;
						targetTask.FailTime = task.FailTime;
						//StateHasChanged();
					});
				}
			}
		//}
		InvokeAsync(() =>
					{
						GetStastic();
						RedirectSelectTask();
						StateHasChanged();
					});

	}

	private async Task ManuallyStartProcess(MesTaskDetail task)
	{
		dataBufferService.AssignMesToSwarmCore(selectedTask, testTaskid);
		await dataBufferService.SwarmCoreStartProcessing(selectedTask, testTaskAmrid);
		GetStastic();
		uiService.ShowPopup(PPopupType.Info, "Init task and assibn to swarmcore success");
	}

	private async Task ManuallySetFail(MesTaskDetail task)
	{
		//dataBufferService.AssignMesToSwarmCore(selectedTask, testTaskid);
		task.FailTime = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
		await dataBufferService.SwarmCoreUpdateStatusFailPauseWithTimeLog(task, 3);
		GetStastic();
		uiService.ShowPopup(PPopupType.Info, "Set task fail success");
	}

	private async Task ManuallyFinish(MesTaskDetail task)
	{
		mesTasks.Remove(task);
		await dataBufferService.RemoveFromWIP(task, task.FinishReason);
		if (!task.TaskNoFromMes.Contains("test"))
		{
			await dataBufferService.DeleteTaskFromSwarmCore(task);
		}
		GetStastic();
		RedirectSelectTask();
		uiService.ShowPopup(PPopupType.Info, "Finish task success");
	}

	private void GetStastic()
	{
		InvokeAsync(() =>
				{
					if (mesTasks.Count > 0)
					{
						total = mesTasks.Count();
						queueCount = mesTasks.Count(x => x.Status == 0);
						runningCount = mesTasks.Count(x => x.Status == 1);
						failCount = mesTasks.Count(x => x.Status == 3);
						pauseCount = mesTasks.Count(x => x.Status == 4);
					}
					else
					{
						total = 0;
						queueCount = 0;
						runningCount = 0;
						failCount = 0;
						pauseCount = 0;
					}
					RefreshTitleColorStr();
					StateHasChanged();
				});
	}

	private void RefreshTitleColorStr()
	{
		if (failCount > 0)
		{
			titleBackground = "rgb(255, 204, 204)";
		}
		else
		{
			if (runningCount > 0)
			{
				titleBackground = "rgb(204, 229, 255)";
			}
			else
			{
				if (queueCount > 0)
				{
					titleBackground = "rgb(217, 217, 217)";
				}
				else
				{
					titleBackground = "rgb(255, 255, 255)";
				}
			}
		}
	}

	private void SetUnboundColumn(GridCustomizeCellDisplayTextEventArgs e)
	{
		//Console.WriteLine(e.FieldName);
		if (e.FieldName == "LoaderToAmrhighOrLow")
		{
			bool tmp = Convert.ToBoolean(e.GetRowValue("LoaderToAmrhighOrLow"));
			e.DisplayText = tmp ? "Top" : "Bottom";
		}
		else if (e.FieldName == "AmrtoLoaderHighOrLow")
		{
			bool tmp = Convert.ToBoolean(e.GetRowValue("AmrtoLoaderHighOrLow"));
			e.DisplayText = tmp ? "Top" : "Bottom";
		}
		else if (e.FieldName == "Status")
		{
			int tmp = Convert.ToInt32(e.GetRowValue("Status"));
			if (tmp == 0)
			{
				e.DisplayText = "Queueing";
			}
			else if (tmp == 1)
			{
				e.DisplayText = "Running";
			}
			else if (tmp == 2)
			{
				e.DisplayText = "Finished";
			}
			else if (tmp == 3)
			{
				e.DisplayText = "Error";
			}
			else if (tmp == 4)
			{
				e.DisplayText = "Pause";
			}
			else if (tmp == 5)
			{
				e.DisplayText = "Cancel";
			}
		}
	}

	private void GetTaskStatusCss(GridCustomizeElementEventArgs e)
	{
		if (e.ElementType == GridElementType.DataRow)
		{
			if (Convert.ToInt16(e.Grid.GetRowValue(e.VisibleIndex, "Status")) == 0)
			{
				e.CssClass = "Queueing";
			}
			else if (Convert.ToInt16(e.Grid.GetRowValue(e.VisibleIndex, "Status")) == 1)
			{
				e.CssClass = "Running";
			}
			else if (Convert.ToInt16(e.Grid.GetRowValue(e.VisibleIndex, "Status")) == 2)
			{
				e.CssClass = "Finished";
			}
			else if (Convert.ToInt16(e.Grid.GetRowValue(e.VisibleIndex, "Status")) == 3)
			{
				e.CssClass = "Error";
			}
			else if (Convert.ToInt16(e.Grid.GetRowValue(e.VisibleIndex, "Status")) == 4)
			{
				e.CssClass = "Pause";
			}
			else if (Convert.ToInt16(e.Grid.GetRowValue(e.VisibleIndex, "Status")) == 5)
			{
				e.CssClass = "Canael";
			}
		}
	}


}