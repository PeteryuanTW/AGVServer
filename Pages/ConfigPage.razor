@page "/Config"
@implements IDisposable
@inject ConfigService configService
@inject DataBufferService dataBufferService

@inject TokenUpdateService tokenService
@inject SwarmCoreUpdateService swarmCoreUpdateService
@inject PLCUpdateService plcUpdateService
@inject MesTaskUpdateService mesTaskUpdateService

<DxTabs ActiveTabIndex="@activeTabIndex" ActiveTabIndexChanged="OnTabChanged">
	<DxTabPage Text="Swarm Core">
		<div class="alert alert-@GetupdateStatusCss(tokenValid)" role="alert">
			<DxCheckBox Checked="@tokenValid" CheckedChanged="(async (bool b)=>{await SwitchService(b);})" Enabled="@(!editMode)" CheckType="CheckType.Switch">@token</DxCheckBox>
			@tokenUpdateTime
		</div>
		<div class="alert alert-@GetupdateStatusCss(apiUpdate)" role="alert">
			<DxCheckBox Checked="@apiUpdate" CheckType="CheckType.Switch" Enabled="false"></DxCheckBox>
			@apiUpdateTime
		</div>
		<DxFormLayout>
			<DxFormLayoutGroup Caption="Swarm Core Setting" ColSpanMd="5">
				<DxFormLayoutItem Caption=EditMode ColSpanMd="6" BeginRow=true>
					<DxCheckBox @bind-Checked="editMode" Enabled="@(!tokenValid && !apiUpdate && !editMode)" CheckType="CheckType.Switch"></DxCheckBox>
				</DxFormLayoutItem>
				@foreach (Configuration configuration in swarmcoreConfig)
				{
					<DxFormLayoutItem Caption=@configuration.ConfigName ColSpanMd="8" BeginRow=true>
						<DxTextBox @bind-Text="@configuration.ConfigValue" Enabled="@editMode"></DxTextBox>
					</DxFormLayoutItem>
				}
				@if (editMode)
				{
					<DxFormLayoutItem ColSpanMd="8" BeginRow=true>
						<DxButton Text="Save" Click="(async()=>{await SaveConfig();})" RenderStyle="ButtonRenderStyle.Danger"></DxButton>
					</DxFormLayoutItem>
				}

			</DxFormLayoutGroup>
		</DxFormLayout>
	</DxTabPage>
@*	<DxTabPage Text="PLC">
		<DxFormLayout>
			<DxFormLayoutGroup Caption="PLC Setting" ColSpanMd="5">
				<DxFormLayoutItem Caption=EditMode ColSpanMd="6" BeginRow=true>
					<DxCheckBox @bind-Checked="editMode" Enabled="@(!editMode)" CheckType="CheckType.Switch"></DxCheckBox>
				</DxFormLayoutItem>
				@foreach (Configuration configuration in plcConfig)
				{
					<DxFormLayoutItem Caption=@configuration.ConfigName ColSpanMd="8" BeginRow=true>
						<DxTextBox @bind-Text="@configuration.ConfigValue" Enabled="@editMode"></DxTextBox>
					</DxFormLayoutItem>
				}
				@if (editMode)
				{
					<DxFormLayoutItem ColSpanMd="8" BeginRow=true>
						<DxButton Text="Save" Click="(async()=>{await SaveConfig();})" RenderStyle="ButtonRenderStyle.Danger"></DxButton>
					</DxFormLayoutItem>
				}

			</DxFormLayoutGroup>
		</DxFormLayout>
	</DxTabPage>*@
</DxTabs>





@code {
	private int activeTabIndex = 0;

	private IEnumerable<Configuration> configurations;
	private IEnumerable<Configuration> swarmcoreConfig;
	private IEnumerable<Configuration> plcConfig;
	private IEnumerable<Configuration> mesConfig;
	private bool editMode = false;

	private bool tokenValid;
	private DateTime tokenUpdateTime;
	private string token = "";

	private bool apiUpdate;
	private DateTime apiUpdateTime;

	protected override Task OnInitializedAsync()
	{
		InitConfigList();

		tokenValid = configService.GetTokenValid();
		token = dataBufferService.GetBearerToken();
		tokenUpdateTime = configService.GetTokenUpdateTime();

		apiUpdate = dataBufferService.GetswarmCoreUpdateFlag();
		apiUpdateTime = dataBufferService.GetSwarmCoreUpdateTime();

		configService.SwarmCoreTokenChangeAct += SwarmCoreTokenChange;
		dataBufferService.BearerTokenChangeAct += TokenChange;
		dataBufferService.swarmCoreUpdateFlagChangeAct += apiUpdateChange;

		return base.OnInitializedAsync();
	}
	public void Dispose()
	{
		configService.SwarmCoreTokenChangeAct -= SwarmCoreTokenChange;
		dataBufferService.BearerTokenChangeAct -= TokenChange;
		dataBufferService.swarmCoreUpdateFlagChangeAct -= apiUpdateChange;
	}

	private void InitConfigList()
	{
		configurations = configService.GetConfigs();
		swarmcoreConfig = configurations.Where(x => x.Category == 0);
		plcConfig = configurations.Where(x => x.Category == 1);
		mesConfig = configurations.Where(x => x.Category == 2);
	}

	private void OnTabChanged(int pageIndex)
	{
		if (!editMode)
		{
			activeTabIndex = pageIndex;
		}
	}

	private async Task SwitchService(bool flag)
	{
		if (flag)
		{
			await tokenService.StartAsync(default);
		}
		else
		{
			await tokenService.StopAsync(default);
		}
	}

	private string GetupdateStatusCss(bool flag)
	{
		string res = "primary";
		if (flag)
		{
			res = "primary";
		}
		else if (!flag)
		{
			res = "secondary";
		}
		return res;
	}

	private void SwarmCoreTokenChange(bool con, DateTime dateTime)
	{
		InvokeAsync(() =>
			{
				tokenValid = con;
				tokenUpdateTime = dateTime;
				GetupdateStatusCss(editMode);
				StateHasChanged();
			});

	}

	private void TokenChange(string tokenStr)
	{
		InvokeAsync(() =>
			{
				token = tokenStr;
				StateHasChanged();
			});

	}

	private void apiUpdateChange(bool updateFlag, DateTime updateTime)
	{
		InvokeAsync(() =>
			{
				apiUpdate = updateFlag;
				apiUpdateTime = updateTime;
				StateHasChanged();
			});

	}

	private async Task SaveConfig()
	{
		switch (activeTabIndex)
		{
			case 0:
				await InvokeAsync(async () =>
				{
					await configService.UpdateConfigs(swarmcoreConfig);
					configService.InitialVar();
					editMode = false;
					StateHasChanged();
					await tokenService.StartAsync(default);
				});
				break;
			case 1:
				await InvokeAsync(async () =>
					{
						await configService.UpdateConfigs(plcConfig);
						configService.InitialVar();
						editMode = false;
						StateHasChanged();
						await plcUpdateService.StopAsync(default);
						await plcUpdateService.StartAsync(default);
					});
				break;
			case 2:
				await InvokeAsync(async () =>
						{
							await configService.UpdateConfigs(plcConfig);
							configService.InitialVar();
							editMode = false;
							StateHasChanged();
							await mesTaskUpdateService.StopAsync(default);
							await mesTaskUpdateService.StartAsync(default);
						});
				break;
			default:
				break;
		}
		InitConfigList();
	}
}
