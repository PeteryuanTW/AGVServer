@page "/PLCDashboard"
@inject DataBufferService dataBufferService

<DxGrid PopupEditFormHeaderText="@currentIP" Data="@plcClasses" CustomizeEditModel="@OnEdit" EditModelSaving="@OnEditSave" EditMode="@GridEditMode.PopupEditForm">
	<Columns>
		<DxGridDataColumn FieldName="ip">
			<CellDisplayTemplate>
				<DxTextBox Text="@context.Value.ToString()" ReadOnly="true"></DxTextBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="port">
			<CellDisplayTemplate>
				<DxSpinEdit Value="@((ushort)context.Value)" ReadOnly="true"></DxSpinEdit>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="name">
			<CellDisplayTemplate>
				<DxTextBox Text="@context.Value.ToString()" ReadOnly="true"></DxTextBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="type">
			<CellDisplayTemplate>
				<DxTextBox Text="@context.Value.ToString()" ReadOnly="true"></DxTextBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="tcpConnect">
			<CellDisplayTemplate>
				<DxCheckBox Checked="@((bool)context.Value)" CheckType=CheckType.Switch Enabled="false"></DxCheckBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="keepUpdate">
			<CellDisplayTemplate>
				<DxCheckBox Checked="@((bool)context.Value)" CheckType=CheckType.Switch Enabled="false"></DxCheckBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridCommandColumn NewButtonVisible="false" EditButtonVisible="true" DeleteButtonVisible="false"/>
	</Columns>
	<EditFormTemplate  Context="EditFormContext" >
		<DxFormLayout>
			<DxFormLayoutItem Caption="Keep Updating" ColSpanMd="6">
				<DxCheckBox @bind-Checked="@keepUpdatingFlag" CheckType="CheckType.Switch" />
			</DxFormLayoutItem>
		</DxFormLayout>
	</EditFormTemplate>
	<DetailRowTemplate>
		<MXModbusTable PLCValueTables="((PLCClass)context.DataItem).valueTables" />
	</DetailRowTemplate>
</DxGrid>

@code {

	private DxGrid PLCGrid;

	private IEnumerable<PLCClass> plcClasses;

	private string currentIP;
	private bool keepUpdatingFlag;



	protected override Task OnInitializedAsync()
	{
		plcClasses = dataBufferService.GetPLCClasses().ToList();
		dataBufferService.PLCClassesChangeAct += PLCDataChange;
		return base.OnInitializedAsync();
	}

	private void PLCDataChange(List<PLCClass> newPLCClasses)
	{
		InvokeAsync(() =>
		{
			plcClasses = newPLCClasses;
			StateHasChanged();
		});
	}

	private void OnEdit(GridCustomizeEditModelEventArgs e)
	{
		keepUpdatingFlag = ((PLCClass)e.EditModel).keepUpdate;
		currentIP = ((PLCClass)e.EditModel).ip;
	}
	private void OnEditSave(GridEditModelSavingEventArgs e)
	{
		PLCClass target = plcClasses.FirstOrDefault(x => x.ip == ((PLCClass)e.EditModel).ip);
		if (target != null)
		{
			target.keepUpdate = keepUpdatingFlag;
		}
	}
}