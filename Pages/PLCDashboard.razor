@page "/PLCDashboard"
@inject DataBufferService dataBufferService
@implements IDisposable

<style>
	.modBusToPLC > td {
		background-color: rgba(255, 176, 102, 0.3);
	}

	.PLCToModbus > td {
		background-color: rgba(209, 227, 255, 0.5);
	}


	.Connect div {
		background-color: rgb(204, 255, 204);
	}

	.Disconnect div {
		background-color: rgb(255, 245, 245);
	}

	.Initilizing div {
		background-color: rgb(230, 230, 230);
	}
</style>
<div style="margin:10px;">
	<DxFormLayout CssClass="@GetPLCStatusCss()">
		<DxFormLayoutItem Caption="PLC" ColSpanMd=4>
			<DxComboBox Data="@plcConfigs" Value="@currentPLCConfig"
						EditFormat="{0}"
						ValueChanged="(Plcconfig config)=>{PLCSelect(config);}">
				<Columns>
					<DxListEditorColumn FieldName="Ip"></DxListEditorColumn>
					<DxListEditorColumn FieldName="Name"></DxListEditorColumn>
				</Columns>
			</DxComboBox>
		</DxFormLayoutItem>
		<DxFormLayoutItem Caption="Name" ColSpanMd=4>
			<DxTextBox @bind-Text="@currentPLCConfig.Name" Enabled=false></DxTextBox>
		</DxFormLayoutItem>
		<DxFormLayoutItem Caption="Port" ColSpanMd=4>
			<DxSpinEdit @bind-Value="@currentPLCConfig.Port" Enabled=false></DxSpinEdit>
		</DxFormLayoutItem>
		<DxFormLayoutItem Caption="Type" ColSpanMd=4>
			<DxTextBox @bind-Text="@currentPLCConfig.Plctype" Enabled=false></DxTextBox>
		</DxFormLayoutItem>
		<DxFormLayoutItem Caption="Align Side" ColSpanMd=4>
			<DxTextBox Text="@GetAlignSideString(currentPLCConfig.AlignSide)" Enabled=false></DxTextBox>
		</DxFormLayoutItem>
		<DxFormLayoutItem Caption="Enable" ColSpanMd=4 BeginRow="true">
			<DxCheckBox @bind-Checked="@currentPLCConfig.Enabled" CheckType="CheckType.Switch" Enabled=false></DxCheckBox>
		</DxFormLayoutItem>
		@if (currentPLC != null)
		{
			@if (currentPLC.tcpConnect)
			{
				<DxFormLayoutItem Caption="Connect Time" ColSpanMd=4 >
					<DxTimeEdit @bind-Time="@currentPLC.lastestConnectTime" Enabled=false></DxTimeEdit>
				</DxFormLayoutItem>
				<DxFormLayoutItem Caption="Category" ColSpanMd=4 BeginRow="true">
					<DxComboBox Data="@categoryList" Value="@currentCategory" ValueChanged="(string newCategory)=>{SelectNewCategory(newCategory);}"></DxComboBox>
				</DxFormLayoutItem>
			}
		}
	</DxFormLayout>
</div>
@if (currentPLC != null)
{
	<div style="margin-top:10px">
		@if (currentPLC.tcpConnect)
		{
			@if (currentPLC.keepUpdate)
			{
				<DxGrid Data="@targetPoints" UnboundColumnData="@SetUpdateDirectionColumn" CustomizeElement="UpdateType">
					<Columns>
						<DxGridDataColumn FieldName="modbusIndex" />
						<DxGridDataColumn FieldName="modbusValue">
							<CellDisplayTemplate>
								<DxCheckBox Checked="@((bool)context.Value)" Enabled="false" CheckType="CheckType.Switch"></DxCheckBox>
							</CellDisplayTemplate>
						</DxGridDataColumn>
						<DxGridDataColumn FieldName="mxIndex" />
						<DxGridDataColumn FieldName="updateValueSuccess">
							<CellDisplayTemplate>
								<DxCheckBox Checked="@((bool)context.Value)" Enabled="false"></DxCheckBox>
							</CellDisplayTemplate>
						</DxGridDataColumn>
						<DxGridDataColumn FieldName="mxValue">
							<CellDisplayTemplate>
								<DxCheckBox Checked="@((bool)context.Value)" Enabled="false" CheckType="CheckType.Switch"></DxCheckBox>
							</CellDisplayTemplate>
						</DxGridDataColumn>
						<DxGridDataColumn FieldName="mxSuccessRead">
							<CellDisplayTemplate>
								<DxCheckBox Checked="@((bool)context.Value)" Enabled="false"></DxCheckBox>
							</CellDisplayTemplate>
						</DxGridDataColumn>
						<DxGridDataColumn FieldName="remark" />
						<DxGridDataColumn FieldName="lastUpdateTime" DisplayFormat="yyyy/MM/dd HH:mm:ss fff" />
					</Columns>
				</DxGrid>
				<div style="margin:10px">
					<DxButton Text="Reset" Click="(async ()=>{await dataBufferService.ResetModbusValue(currentPLC);})" RenderStyle="ButtonRenderStyle.Danger"></DxButton>
				</div>
			}

		}
		else
		{
			<div style="width:20%">
				<DxGrid Data="@currentPLC.retryFailRecord">
					<Columns>
						<DxGridDataColumn Caption="Log Time" FieldName="Value" DisplayFormat="yyyy/MM/dd HH:mm:ss fff" />
					</Columns>
				</DxGrid>
			</div>
			<div style="margin:20px">
				<DxButton Text="Retry Connect" Click="(async()=>{await currentPLC.TryConnectTcp();})"></DxButton>
			</div>
		}
	</div>
}



@code {

	private DxGrid PLCGrid;

	private IEnumerable<Plcconfig> plcConfigs;
	//private IEnumerable<string> ipList;

	private PLCClass currentPLC;

	private IEnumerable<PLCValueTable> targetPoints;

	private IEnumerable<string> categoryList;
	private string currentCategory;


	private Plcconfig currentPLCConfig;
	private bool keepUpdatingFlag;



	protected override Task OnInitializedAsync()
	{
		plcConfigs = dataBufferService.GetPLCConfigs();
		//ipList = plcClasses.Select(x => x.ip);
		currentPLCConfig = plcConfigs.First();
		categoryList = dataBufferService.GetPLCIndexTable(currentPLCConfig.Plctype).Select(x => x.Category).Distinct();
		currentCategory = categoryList.First();

		if (dataBufferService.GetPLCClasses().Any(x => x.ip == currentPLCConfig.Ip))
		{
			currentPLC = dataBufferService.GetPLCClasses().First(x => x.ip == currentPLCConfig.Ip);

			//categoryList = currentPLC.valueTables.Select(x => x.category).Distinct();
			//currentCategory = categoryList.First();

			targetPoints = currentPLC.valueTables.Where(x => x.category == currentCategory).OrderBy(x => x.modbusIndex);
		}
		dataBufferService.SinglePLCClassChangeAct += PLCDataChange;
		return base.OnInitializedAsync();
	}

	public void Dispose()
	{
		plcConfigs = null;
		currentPLC = null;
		targetPoints = null;
		categoryList = null;
		currentPLCConfig = null;
		dataBufferService.SinglePLCClassChangeAct -= PLCDataChange;
	}

	private void PLCSelect(Plcconfig plcConfig)
	{
		currentPLCConfig = plcConfig;
		currentPLC = dataBufferService.GetPLCClasses().FirstOrDefault(x => x.ip == currentPLCConfig.Ip);
		if (currentPLC != null)
		{
			targetPoints = currentPLC.valueTables.Where(x => x.category == currentCategory).OrderBy(x => x.modbusIndex);
		}
	}

	private void PLCDataChange(PLCClass newPLCClasses)
	{
		if (newPLCClasses.ip == currentPLCConfig.Ip)
		{
			InvokeAsync(() =>
			{
				//Console.WriteLine("Get new plc data at: " + DateTime.Now.ToString("HH:mm:ss fff"));
				currentPLC = newPLCClasses;
				targetPoints = currentPLC.valueTables.Where(x => x.category == currentCategory).OrderBy(x => x.modbusIndex);
				StateHasChanged();
				//Console.WriteLine("update plc data at: " + DateTime.Now.ToString("HH:mm:ss fff"));
			});
		}
	}

	private void Grid_CustomizeConnectStyle(GridCustomizeElementEventArgs e)
	{
		if (e.ElementType == GridElementType.DataRow)
		{
			if ((bool)e.Grid.GetRowValue(e.VisibleIndex, "tcpConnect"))
			{
				e.CssClass = "plcConnect";
			}
			else
			{
				e.CssClass = "plcDisconnect";
			}

		}
	}

	private void SelectNewCategory(string s)
	{
		currentCategory = s;
		targetPoints = currentPLC.valueTables.Where(x => x.category == currentCategory).OrderBy(x => x.modbusIndex);
	}

	private void SetUpdateDirectionColumn(GridUnboundColumnDataEventArgs e)
	{
		if (e.FieldName == "updateDirection")
		{
			bool tmp = Convert.ToBoolean(e.GetRowValue("updateType"));
			e.Value = GetUpdateDirectionString(tmp);
		}
	}

	private string GetUpdateDirectionString(bool updateType)
	{
		if (updateType)
		{
			return "modbus < < < plc";
		}
		else
		{
			return "modbus > > > plc";
		}
	}
	private string GetAlignSideString(bool flag)
	{
		string res;
		res = flag ? "right" : "left";
		return res;
	}

	private void UpdateType(GridCustomizeElementEventArgs e)
	{
		if (e.ElementType == GridElementType.DataRow)
		{
			if ((bool)e.Grid.GetRowValue(e.VisibleIndex, "updateType"))
			{
				e.CssClass = "PLCToModbus";
			}
			else
			{
				e.CssClass = "modBusToPLC";
			}

		}
	}

	private string GetPLCStatusCss()
	{
		if (currentPLC == null)
		{
			return "Initilizing";
		}
		else
		{
			return currentPLC.tcpConnect ? "Connect" : "Disconnect";
		}
	}
}