@page "/PLCDashboard"
@inject DataBufferService dataBufferService

<style>
	.plcConnect > td {
		background-color: rgba(0, 219, 0, 0.3);
	}

	.plcDisconnect > td {
		background-color: rgba(255, 204, 204, 0.5);
	}
</style>

<DxGrid PopupEditFormHeaderText="@currentIP" Data="@plcClasses"
	CustomizeEditModel="@OnEdit"
	EditModelSaving="@OnEditSave"
	EditMode="@GridEditMode.PopupEditForm"
		CustomizeElement="@Grid_CustomizeConnectStyle">
	<Columns>
		<DxGridDataColumn FieldName="ip"/>
		<DxGridDataColumn FieldName="port"/>
		<DxGridDataColumn FieldName="name"/>
		<DxGridDataColumn FieldName="type"/>
		<DxGridDataColumn FieldName="keepUpdate">
			<CellDisplayTemplate>
				<DxCheckBox Checked="@((bool)context.Value)" CheckType=CheckType.Switch Enabled="false"></DxCheckBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridCommandColumn NewButtonVisible="false" EditButtonVisible="true" DeleteButtonVisible="false"></DxGridCommandColumn>
	</Columns>
	<EditFormTemplate  Context="EditFormContext" >
		<DxFormLayout>
			<DxFormLayoutItem Caption="Keep Updating" ColSpanMd="6">
				<DxCheckBox @bind-Checked="@keepUpdatingFlag" CheckType="CheckType.Switch" />
			</DxFormLayoutItem>
		</DxFormLayout>
	</EditFormTemplate>
	<DetailRowTemplate>
		<MXModbusTable PLCValueTables="((PLCClass)context.DataItem).valueTables" />
	</DetailRowTemplate>
</DxGrid>

@code {

	private DxGrid PLCGrid;

	private IEnumerable<PLCClass> plcClasses;

	private string currentIP;
	private bool keepUpdatingFlag;



	protected override Task OnInitializedAsync()
	{
		plcClasses = dataBufferService.GetPLCClasses().ToList();
		dataBufferService.PLCClassesChangeAct += PLCDataChange;
		return base.OnInitializedAsync();
	}

	private void PLCDataChange(List<PLCClass> newPLCClasses)
	{
		InvokeAsync(() =>
		{
			plcClasses = newPLCClasses;
			StateHasChanged();
		});
	}

	private void OnEdit(GridCustomizeEditModelEventArgs e)
	{
		keepUpdatingFlag = ((PLCClass)e.EditModel).keepUpdate;
		currentIP = ((PLCClass)e.EditModel).ip;
	}
	private void OnEditSave(GridEditModelSavingEventArgs e)
	{
		PLCClass target = plcClasses.FirstOrDefault(x => x.ip == ((PLCClass)e.EditModel).ip);
		if (target != null)
		{
			target.keepUpdate = keepUpdatingFlag;
		}
	}

	private void Grid_CustomizeConnectStyle(GridCustomizeElementEventArgs e)
	{
		if (e.ElementType == GridElementType.DataRow)
		{
			if ((bool)e.Grid.GetRowValue(e.VisibleIndex, "tcpConnect"))
			{
				e.CssClass = "plcConnect";
			}
			else
			{
				e.CssClass = "plcDisconnect";
			}
			
		}
	}
}