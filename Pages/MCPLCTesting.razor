@page "/MCPLCTesting"
@inject DataBufferService dataBufferService

<DxTabs ActiveTabIndex="@activeTabIndex" ActiveTabIndexChanged="@OnActiveTabChanged">
	<DxTab Text="Online Testing"></DxTab>
	<DxTab Text="New Connection Testing"></DxTab>
</DxTabs>
@switch (activeTabIndex)
{
	case 0:
		<DxFormLayout>
			<DxFormLayoutGroup>
				<DxFormLayoutItem Caption="Name" ColSpanLg="4" BeginRow="true">
					<DxComboBox Data="plcClasses" @bind-Value="@currentPLC" EditFormat="{0}:{1} ({2})">
						<Columns>
							<DxListEditorColumn FieldName="@nameof(PLCClass.ip)"
										Caption="ip" />
							<DxListEditorColumn FieldName="@nameof(PLCClass.port)"
										Caption="port" />
							<DxListEditorColumn FieldName="@nameof(PLCClass.name)"
										Caption="name" />
						</Columns>
					</DxComboBox>
				</DxFormLayoutItem>
				@if (currentPLC != null && currentPLC.tcpConnect)
				{
					<DxFormLayoutItem Caption="mxindex" ColSpanLg="4" BeginRow="true">
						<DxSpinEdit @bind-Value="@index"></DxSpinEdit>
					</DxFormLayoutItem>
				}
			</DxFormLayoutGroup>
		</DxFormLayout>
		break;
	case 1:
		<DxFormLayout>
			<DxFormLayoutGroup>
				<DxFormLayoutItem Caption="IP" ColSpanLg="4" BeginRow="true">
					<DxTextBox @bind-Text="@currentPLC.ip"></DxTextBox>
				</DxFormLayoutItem>
				<DxFormLayoutItem Caption="port" ColSpanLg="4" BeginRow="true">
					<DxSpinEdit @bind-Value="@currentPLC.port"></DxSpinEdit>
				</DxFormLayoutItem>
				@if (!currentPLC.tcpConnect)
				{
					<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
						<DxButton Text="TCP Connect" Click="@currentPLC.TryConnectTcp"></DxButton>
					</DxFormLayoutItem>
				}
				else
				{
					<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
						<DxButton Text="TCP Disconnect" Click="@currentPLC.TryDisconnect"></DxButton>
					</DxFormLayoutItem>
				}

				@if (currentPLC.tcpConnect)
				{
					<DxFormLayoutItem Caption="mx index" ColSpanLg="6" BeginRow="true">
						<DxSpinEdit @bind-Value="@index"></DxSpinEdit>
					</DxFormLayoutItem>
				}
			</DxFormLayoutGroup>
		</DxFormLayout>
		break;
	default:
		break;
}

@if (currentPLC != null && currentPLC.tcpConnect)
{
	<DxFormLayout>
		<DxFormLayoutGroup Caption="Get/Read" ColSpanMd="6">
			<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
				<DxButton Text="Get" Click="@Get"></DxButton>
			</DxFormLayoutItem>
			<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
				<DxTimeEdit @bind-Time="@getSendTime" Mask="tt hh:mm:ss.fff" ReadOnly="true"></DxTimeEdit>
			</DxFormLayoutItem>
			<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
				<div>~~~~~~~~~~~~~~~~~~~~</div>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Value" ColSpanLg="4" BeginRow="true">
				<DxCheckBox @bind-Checked="@output" Enabled="false"></DxCheckBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Get Success" ColSpanLg="4" BeginRow="true">
				<DxCheckBox @bind-Checked="@readSuccess" Enabled="false"></DxCheckBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
				<DxTimeEdit @bind-Time="@getReceivedTime" Mask="tt hh:mm:ss.fff" ReadOnly="true"></DxTimeEdit>
			</DxFormLayoutItem>
		</DxFormLayoutGroup>

		<DxFormLayoutGroup Caption="Set/Write" ColSpanMd="6">
			<DxFormLayoutItem Caption="Value" ColSpanLg="4" BeginRow="true">
				<DxCheckBox @bind-Checked="@input"></DxCheckBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
				<DxButton Text="Set" Click="@Set"></DxButton>
			</DxFormLayoutItem>
			<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
				<DxTimeEdit @bind-Time="@setSendTime" Mask="tt hh:mm:ss.fff" ReadOnly="true"></DxTimeEdit>
			</DxFormLayoutItem>
			<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
				<div>~~~~~~~~~~~~~~~~~~~~</div>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Set Success" ColSpanLg="4" BeginRow="true">
				<DxCheckBox @bind-Checked="@writeSuccess" Enabled="false"></DxCheckBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem ColSpanLg="4" BeginRow="true">
				<DxTimeEdit @bind-Time="@setReceivedTime" Mask="tt hh:mm:ss.fff" ReadOnly="true"></DxTimeEdit>
			</DxFormLayoutItem>
		</DxFormLayoutGroup>
	</DxFormLayout>
}


@code {

	private int activeTabIndex = 0;


	private IEnumerable<PLCClass> plcClasses;
	private PLCClass currentPLC;

	private ushort index = 0;

	private bool input = false;
	private bool writeSuccess = false;
	private DateTime getSendTime;
	private DateTime getReceivedTime;
	private DateTime setSendTime;
	private DateTime setReceivedTime;




	private bool output = false;
	private bool readSuccess = false;




	protected override Task OnInitializedAsync()
	{
		plcClasses = dataBufferService.GetPLCClasses();
		//currentPLC = plcClasses.First();
		return base.OnInitializedAsync();
	}

	private void OnActiveTabChanged(int activeTab)
	{
		activeTabIndex = activeTab;
		switch (activeTabIndex)
		{
			case 0:
				//plcClasses = dataBufferService.GetPLCClasses();
				if (plcClasses.Count() > 0)
				{
					currentPLC = plcClasses.First();
				}
				else
				{
					currentPLC = null;
				}
				index = 0;
				break;
			case 1:
				currentPLC = new PLCClass();
				index = 0;
				break;
			default:
				break;
		}
	}

	private async Task Set()
	{
		writeSuccess = false;
		setSendTime = DateTime.Now;
		writeSuccess = await currentPLC.WriteSingleM_MX(index, input);
		setReceivedTime = DateTime.Now;
	}

	private async Task Get()
	{
		readSuccess = false;
		getSendTime = DateTime.Now;
		(bool, bool) res = await currentPLC.ReadSingleM_MX(index);
		output = res.Item1;
		readSuccess = res.Item2;
		getReceivedTime = DateTime.Now;
	}
}