@page "/MXProtocol"
@inject DataBufferService dataBufferService
@using System.Text;

<DxFormLayout>
	<DxFormLayoutGroup>
		<DxFormLayoutItem Caption="PLC" ColSpanLg="3" BeginRow=true>
			<DxComboBox Data="@plcClasses" @bind-Value="@currentPLC" TextFieldName="@nameof(PLCClass.name)"></DxComboBox>
		</DxFormLayoutItem>
	</DxFormLayoutGroup>
	@if (currentPLC != null && currentPLC.tcpConnect)
	{
		<DxFormLayoutGroup>
			<DxFormLayoutItem Caption="Command" ColSpanLg="3" BeginRow=true>
				<DxComboBox Data="byteCommands" TextFieldName="@nameof(ByteCommand.command)" Value="@currentCommand" SelectedItemChanged="(async (ByteCommand bc)=>{await GetNewCmd(bc);})">
					<DxListEditorColumn FieldName="@nameof(ByteCommand.command)" />
					<DxListEditorColumn FieldName="@nameof(ByteCommand.byteString)" />
				</DxComboBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Component" ColSpanLg="3" BeginRow=true>
				<DxComboBox Data="byteComponents" TextFieldName="@nameof(ByteComponent.name)" Value="@currentComponent" SelectedItemChanged="((ByteComponent bc)=>{GetNewComponent(bc);})">
					<DxListEditorColumn FieldName="@nameof(ByteComponent.name)" />
					<DxListEditorColumn FieldName="@nameof(ByteComponent.nameCodeString)" />
				</DxComboBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="SubCommand" ColSpanLg="3" BeginRow=true>
				<DxComboBox Data="byteSubCommands" TextFieldName="@nameof(ByteCommand.command)" Value="@currentSubCommand" ReadOnly="true">
					<DxListEditorColumn FieldName="@nameof(ByteCommand.command)" />
					<DxListEditorColumn FieldName="@nameof(ByteCommand.byteString)" />
				</DxComboBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Time Out" ColSpanLg="3" BeginRow=true>
				<DxSpinEdit @bind-Value="@timeOut_ushort" MaxValue="(ushort)65535"></DxSpinEdit>
			</DxFormLayoutItem>

			<DxFormLayoutItem Caption="Start Address" ColSpanLg="3" BeginRow=true>
				<DxSpinEdit @bind-Value="@startAddress_ushort"></DxSpinEdit>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="Offset" ColSpanLg="3" BeginRow=true>
				<DxSpinEdit @bind-Value="@offset_ushort" Increment="pointOffset"></DxSpinEdit>
			</DxFormLayoutItem>
		</DxFormLayoutGroup>
		@if (currentCommand.commandType == CommandType.Write)
		{
			<DxFormLayoutGroup>
				@foreach (KeyValuePair<int, ushort> kvp in inputValueBytes)
				{
					<DxFormLayoutItem Caption="Input Value" ColSpanLg="3" BeginRow=true>
						<DxSpinEdit Value="kvp.Value" ValueChanged="((ushort newVal)=>{InputDictChanged(kvp.Key, newVal);})"></DxSpinEdit>
					</DxFormLayoutItem>
				}

			</DxFormLayoutGroup>
		}

		<DxFormLayoutGroup>
			<DxFormLayoutItem Caption="Final Command" ColSpanLg="6" BeginRow=true>
				<DxTextBox Text="@BitConverter.ToString(finalByteRes).Replace("-", " ")" ReadOnly=true></DxTextBox>
			</DxFormLayoutItem>
			<DxFormLayoutItem Caption="" ColSpanLg="6" BeginRow=true>
				<DxButton Text="Send" Click="(async()=>{await SendPLC();})"></DxButton>
			</DxFormLayoutItem>
		</DxFormLayoutGroup>

		@if (currentCommand.commandType == CommandType.Read)
		{
			<DxFormLayoutGroup>
				<DxFormLayoutItem Caption="Return Byte" ColSpanLg="6" BeginRow=true>
					<DxTextBox Text="@BitConverter.ToString(returnDataByte).Replace("-", " ")" ReadOnly=true></DxTextBox>
				</DxFormLayoutItem>
				@if (currentSubCommand.commandType == CommandType.Bit)
				{
					foreach (bool b in boolRes)
					{
						<DxFormLayoutItem ColSpanLg="4" BeginRow=true>
							<DxCheckBox Checked="@b" CheckType="CheckType.Switch" Enabled="false"></DxCheckBox>
						</DxFormLayoutItem>
					}
				}
				else if (currentSubCommand.commandType == CommandType.Word)
				{
					foreach (ushort us in ushortRes)
					{
						<DxFormLayoutItem ColSpanLg="2" BeginRow=true >
							<DxSpinEdit Value="@us" ReadOnly="true"></DxSpinEdit>
						</DxFormLayoutItem>
					}
				}
			</DxFormLayoutGroup>
		}
	}
</DxFormLayout>


@code {
	//connection
	private IEnumerable<PLCClass> plcClasses;
	private PLCClass currentPLC;

	//byte
	private byte[] header = { 0x50, 0x00, 0x00, 0xff, 0xff, 0x03, 0x00 };

	private byte[] finalByteRes = new byte[] { };
	private ushort inputValue = 0;
	private byte[] inputByte = new byte[] { };
	private byte[] allReturnByte = new byte[] { };
	private byte[] returnDataByte = new byte[] { };

	private List<bool> boolRes = new();
	private List<ushort> ushortRes = new();




	private IEnumerable<ByteCommand> byteCommands;
	private ByteCommand currentCommand;

	private Task GetNewCmd(ByteCommand bc)
	{
		currentCommand = bc;
		RefreshRes();
		return Task.CompletedTask;
	}


	private IEnumerable<ByteCommand> byteSubCommands;
	private ByteCommand currentSubCommand;

	protected override Task OnInitializedAsync()
	{
		plcClasses = dataBufferService.GetPLCClasses();

		currentPLC = plcClasses.Any(x => x.tcpConnect) ? plcClasses.First(x => x.tcpConnect) : null;

		byteCommands = CommandsInit();
		currentCommand = byteCommands.First();

		byteSubCommands = SubCommandsInit();

		byteComponents = ComponentsInit();
		currentComponent = byteComponents.First();
		GetNewComponent(currentComponent);
		GetPointOffset(currentComponent.name);

		dataBufferService.PLCClassesChangeAct += GetNewPLCClasses;

		RefreshRes();

		return base.OnInitializedAsync();
	}

	private void GetNewPLCClasses(List<PLCClass> plcClasses)
	{
		InvokeAsync(() =>
			{
				plcClasses = plcClasses;
				StateHasChanged();
			});
	}

	private ushort timeOut = 0;
	private ushort timeOut_ushort
	{
		get
		{
			return timeOut;
		}
		set
		{
			if (value > 65535)
			{
				value = 65535;
			}
			timeOut = value;
			timeOut_byte = BitConverter.GetBytes(value);
		}
	}
	private byte[] timeOut_byte = new byte[2] { 0x00, 0x00 };

	private IEnumerable<ByteComponent> byteComponents;
	private ByteComponent currentComponent;
	private ushort pointOffset;

	private Task GetNewComponent(ByteComponent bc)
	{
		currentComponent = bc;
		GetPointOffset(bc.name);
		if (bc.name == "M" || bc.name == "Y")
		{
			currentSubCommand = byteSubCommands.First(x => x.commandType == CommandType.Bit);
		}
		else if (bc.name == "D")
		{
			currentSubCommand = byteSubCommands.First(x => x.commandType == CommandType.Word);
		}
		RefreshRes();
		return Task.CompletedTask;
	}


	private void GetPointOffset(string componentName)
	{
		switch (componentName)
		{
			case "Y":
			case "M":
				pointOffset = (ushort)2;
				break;
			case "D":
				pointOffset = (ushort)1;
				break;
			default:
				pointOffset = 1;
				break;
		}
	}


	private ushort startAddress = 0;
	private ushort startAddress_ushort
	{
		get
		{
			return startAddress;
		}
		set
		{
			startAddress = value;
			byte[] tmp = BitConverter.GetBytes(value);
			Array.Copy(tmp, 0, startAddress_byte, 0, tmp.Length);
			RefreshRes();
		}
	}
	private byte[] startAddress_byte = new byte[3] { 0x00, 0x00, 0x00 };

	private Dictionary<int, ushort> inputValueBytes = new();

	//points of device
	private ushort offset = 0;
	private ushort offset_ushort
	{
		get
		{
			return offset;
		}
		set
		{

			offset = value;
			inputValueBytes = new();
			if (currentComponent.name == "Y" || currentComponent.name == "M")
			{
				var tmp = BitConverter.GetBytes(offset * pointOffset);
				Array.Copy(tmp, offset_byte, offset_byte.Length);
				for (int i = 0; i < offset; i++)
				{
					inputValueBytes.Add(i, 0x00);
				}

			}
			else if (currentComponent.name == "D")
			{
				var tmp = BitConverter.GetBytes(offset * pointOffset);
				Array.Copy(tmp, offset_byte, offset_byte.Length);
				for (int i = 0; i < offset; i++)
				{
					inputValueBytes.Add(i, 0x00);
				}
			}

			RefreshRes();
		}
	}
	private byte[] offset_byte = new byte[2] { 0x00, 0x00 };

	private IEnumerable<ByteCommand> CommandsInit()
	{
		return new List<ByteCommand>()
		{
			new ByteCommand(new byte[] {0x01, 0x04 }, "Read", CommandType.Read),
			new ByteCommand(new byte[] {0x01, 0x14 }, "Write", CommandType.Write),
		};
	}
	private IEnumerable<ByteCommand> SubCommandsInit()
	{
		return new List<ByteCommand>()
		{
			new ByteCommand(new byte[] {0x01, 0x00 }, "Bit", CommandType.Bit),
			new ByteCommand(new byte[] {0x00, 0x00 }, "Word", CommandType.Word),
		};
	}

	private IEnumerable<ByteComponent> ComponentsInit()
	{
		return new List<ByteComponent>()
		{
			new ByteComponent("M", 0x90),
			new ByteComponent("D", 0xa8),
			new ByteComponent("Y", 0x9d),
		};
	}

	private void InputDictChanged(int key, ushort val)
	{
		if (currentSubCommand.commandType == CommandType.Bit)
		{
			if (val == 0 || val == 1 || val == 16 || val == 17)
			{
				inputValueBytes[key] = val;
			}
			else
			{
				inputValueBytes[key] = 0;
			}
		}
		else
		{
			inputValueBytes[key] = val;
		}
		RefreshRes();
	}

	private void RefreshRes()
	{
		finalByteRes = new byte[] { };
		finalByteRes = finalByteRes.Concat(header).ToArray();
		byte[] dataLength;
		ushort dataLength_ushort = 12;
		if (currentCommand.commandType == CommandType.Read)
		{

		}
		else
		{
			if (currentComponent.name == "M" || currentComponent.name == "Y")
			{
				dataLength_ushort += offset_ushort;
			}
			else if (currentComponent.name == "D")
			{
				dataLength_ushort += (ushort)(2 * offset_ushort);
			}

		}
		dataLength = BitConverter.GetBytes(dataLength_ushort);
		finalByteRes = finalByteRes
		.Concat(dataLength)
		.Concat(timeOut_byte)
		.Concat(currentCommand._byte)
		.Concat(currentSubCommand._byte)
		.Concat(startAddress_byte)
		.Concat(new byte[] { currentComponent.nameCode })
		.Concat(offset_byte).ToArray();
		if (currentCommand.commandType == CommandType.Write)
		{
			if (currentSubCommand.commandType == CommandType.Bit)
			{
				byte[] tmp = inputValueBytes.Select(x => (byte)x.Value).ToArray();
				finalByteRes = finalByteRes.Concat(tmp).ToArray();
			}
			else
			{
				foreach (ushort val in inputValueBytes.Values)
				{
					byte[] tmp = new byte[2];
					Array.Copy(BitConverter.GetBytes(val), 0, tmp, 0, 2);
					finalByteRes = finalByteRes.Concat(tmp).ToArray();
				}
			}

		}

		StateHasChanged();
	}

	private Task SendPLC()
	{
		try
		{
			NetworkStream nwStream = currentPLC.tcpClient.GetStream();
			nwStream.Write(finalByteRes, 0, finalByteRes.Length);
			byte[] res = new byte[11];
			if (currentCommand.commandType == CommandType.Write)
			{
				res = new byte[11];
			}
			else
			{
				if (currentSubCommand.commandType == CommandType.Bit)
				{
					res = new byte[11 + offset];
				}
				else
				{
					res = new byte[11 + offset * 2];
				}
			}
			nwStream.Read(res, 0, res.Length);
			if (res[9] == 0 && res[10] == 0)//no error
			{
				if (currentCommand.commandType == CommandType.Read)
				{
					ushort dataLength = (ushort)(BitConverter.ToUInt16(res, 7) - 2);
					returnDataByte = new byte[dataLength];
					Array.Copy(res, 11, returnDataByte, 0, dataLength);
					boolRes = new();
					ushortRes = new();
					if (currentSubCommand.commandType == CommandType.Bit)
					{
						string boolStr = BitConverter.ToString(returnDataByte).Replace("-", "");
						foreach (char c in boolStr)
						{
							if (c == '0')
								boolRes.Add(false);
							else
								boolRes.Add(true);
						}
					}
					else if (currentSubCommand.commandType == CommandType.Word)
					{
						for (int i = 0; i < returnDataByte.Length - 1; i += 2)
						{
							ushortRes.Add(BitConverter.ToUInt16(returnDataByte, i));
						}
					}
				}
			}
			else//error
			{

			}

		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
		return Task.CompletedTask;

	}

}
