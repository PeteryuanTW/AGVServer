@inject DataBufferService dataBufferService

<style>
	.modBusToPLC > td {
		background-color: rgba(255, 229, 204, 0.5);
	}

	.PLCToModbus > td {
		background-color: rgba(209, 227, 255, 0.5);
	}
</style>

<div>@updateTime</div>
<DxComboBox Data="@categoryList" Value="@currentCategory" ValueChanged="(string newCategory)=>{SelectNewCategory(newCategory);}"></DxComboBox>
<DxGrid @ref="@grid" Data="@targetPoints" UnboundColumnData="@SetUpdateDirectionColumn" CustomizeElement="UpdateType">
	<Columns>
		<DxGridDataColumn FieldName="modbusIndex"/>
		<DxGridDataColumn FieldName="modbusValue">
			<CellDisplayTemplate>
				<DxCheckBox Checked="@((bool)context.Value)" Enabled="false" CheckType="CheckType.Switch"></DxCheckBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="updateDirection" UnboundType="GridUnboundColumnType.String"/>
		<DxGridDataColumn FieldName="mxIndex"/>
		<DxGridDataColumn FieldName="updateValueSuccess">
			<CellDisplayTemplate>
				<DxCheckBox Checked="@((bool)context.Value)" Enabled="false"></DxCheckBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="mxValue">
			<CellDisplayTemplate>
				<DxCheckBox Checked="@((bool)context.Value)" Enabled="false" CheckType="CheckType.Switch"></DxCheckBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="mxSuccessRead">
			<CellDisplayTemplate>
				<DxCheckBox Checked="@((bool)context.Value)" Enabled="false"></DxCheckBox>
			</CellDisplayTemplate>
		</DxGridDataColumn>
		<DxGridDataColumn FieldName="remark"/>
	</Columns>
</DxGrid>

@code {
	IGrid? grid { get; set; }
	[Parameter]
	public IEnumerable<PLCValueTable> PLCValueTables { get; set; }

	private IEnumerable<PLCValueTable> targetPoints;
	private IEnumerable<string> categoryList;
	private string currentCategory;
	private DateTime updateTime;

	protected override Task OnInitializedAsync()
	{
		updateTime = DateTime.Now;
		categoryList = PLCValueTables.Select(x => x.category).Distinct();
		currentCategory = categoryList.First();
		targetPoints = PLCValueTables.Where(x => x.category == currentCategory).OrderBy(x=>x.modbusIndex);
		return base.OnInitializedAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		updateTime = DateTime.Now;
		await base.OnParametersSetAsync();
	}

	private void SelectNewCategory(string s)
	{
		currentCategory = s;
		targetPoints = PLCValueTables.Where(x => x.category == currentCategory).OrderBy(x=>x.modbusIndex);
	}


	private void SetUpdateDirectionColumn(GridUnboundColumnDataEventArgs e)
	{
		if (e.FieldName == "updateDirection")
		{
			bool tmp = Convert.ToBoolean(e.GetRowValue("updateType"));
			e.Value = GetUpdateDirectionString(tmp);
		}
	}
	private string GetUpdateDirectionString(bool updateType)
	{
		if (updateType)
		{
			return "modbus < < < plc";
		}
		else
		{
			return "modbus > > > plc";
		}
	}

	private void UpdateType(GridCustomizeElementEventArgs e)
	{
		if (e.ElementType == GridElementType.DataRow)
		{
			if ((bool)e.Grid.GetRowValue(e.VisibleIndex, "updateType"))
			{
				e.CssClass = "PLCToModbus";
			}
			else
			{
				e.CssClass = "modBusToPLC";
			}
			
		}
	}
}